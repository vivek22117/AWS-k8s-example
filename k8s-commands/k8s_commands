# Path a SVC with different port

kubectl patch service nginx-one --type='json' \
--patch='[{"op": "replace", "path": "/spec/ports/0/nodePort", "value":31111}]


When Pods run the output from the containers is captured in
the Pod's /var/log directory. If you know the name of the specific job instance,
the logs command can extract that log. With a little help from grep and c
ut the name of the job is extracted and passed to the logs command:

export JOB_ID=$(kubectl describe jobs oneshot | grep -o 'Created pod: .*' | cut -f3- -d' ')

echo $JOB_ID

kubectl logs $JOB_ID

The log will report 10 new keys were generated.
Once you are done inspecting the Job, use the delete command to remove it:

kubectl get pod <pod-name> -o yaml > pod-definition.yaml

kubectl config set-context $(kubectl config current-context) --namespace=dev


## COUNT NUMBER OF NS
kubectl get ns --no-headers | wc -l

kubectl get po --all-namespaces | grep blue
kubectl run redis --image=redis:alpine -l="tier=db,env=dev"

## EXPOSE POD
kubectl expose po redis --name=redis-service --port=6379

## CREATE DEPLOYMENT & SCALE TO 3
kubeclt create deployment webapp --image=nginx

kubectl scale deploy webapp --replicas=3


#CREATE POD AND EXPOSE TO CONTAINER PORT 8080
kubectl run custom-nginx --image=nginx --port=8080

## CREATE DEPLOYMENT & SCALE IN DIFF NS
kubectl create deploy redis-deploy --image=redis -n dev-ns
kubectl scale deploy redis-deploy --replicas=2 -n dev-ns

##CREATE POD httpd & EXPOSE USING SERVICE TYPE ClusterIP 80
kubectl run httpd --image=httpd:alpine
kubectl expose po httpd --name=httpd --type=ClusterIP --port=80

