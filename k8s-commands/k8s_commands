## DELETE POD FAST
kubectl delete pod nginx --grace-period=0 --force

# Path a SVC with different port

kubectl patch service nginx-one --type='json' \
--patch='[{"op": "replace", "path": "/spec/ports/0/nodePort", "value":31111}]


When Pods run the output from the containers is captured in
the Pod's /var/log directory. If you know the name of the specific job instance,
the logs command can extract that log. With a little help from grep and c
ut the name of the job is extracted and passed to the logs command:

export JOB_ID=$(kubectl describe jobs oneshot | grep -o 'Created pod: .*' | cut -f3- -d' ')

echo $JOB_ID

kubectl logs $JOB_ID

The log will report 10 new keys were generated.
Once you are done inspecting the Job, use the delete command to remove it:

kubectl get pod <pod-name> -o yaml > pod-definition.yaml

kubectl config set-context $(kubectl config current-context) --namespace=dev


## COUNT NUMBER OF NS
kubectl get ns --no-headers | wc -l

kubectl get po --all-namespaces | grep blue
kubectl run redis --image=redis:alpine -l="tier=db,env=dev"

## EXPOSE POD
kubectl expose po redis --name=redis-service --port=6379

## CREATE DEPLOYMENT & SCALE TO 3
kubectl create deployment webapp --image=nginx

kubectl scale deploy webapp --replicas=3


#CREATE POD AND EXPOSE TO CONTAINER PORT 8080
kubectl run custom-nginx --image=nginx --port=8080

## CREATE DEPLOYMENT & SCALE IN DIFF NS
kubectl create deploy redis-deploy --image=redis -n dev-ns
kubectl scale deploy redis-deploy --replicas=2 -n dev-ns

##CREATE POD httpd & EXPOSE USING SERVICE TYPE ClusterIP 80
kubectl run httpd --image=httpd:alpine
kubectl expose po httpd --name=httpd --type=ClusterIP --port=80

## USE SET PASTE IN VI EDITOR
:set paste


## CREATE CONFIG MAP
kubectl create cm webapp --from-literal=APP_COLOR=darkblue
kubectl create cm webapp --from-evn-file=data/config/game.txt

## CREATE SECRET
kubectl create secret generic webapp --from-literal=DB_USER=vivek \
                                     --from-literal=DB_PWD=vivek

TO CONVERT PLAIN TEXT TO BASE64
echo -n 'vivek' | base64
echo -n 'passwrod' | base64


## DELETE LINES FORM VI EDITOR

ONE LINE DELETE
dd

MULTI LINE DELETE
100dd


Get the YAML for a new ResourceQuota called 'myrq' with hard limits of 1 CPU,
1G memory and 2 pods without creating it

=> kubectl create quota myrq --hard=cpu=1,memory=1G,pods=2 --dry-run=client -o yaml

Change pod's image to nginx:1.7.1. Observe that the container will be restarted as soon as the image gets pulled
show
Note: The RESTARTS column should contain 0 initially (ideally - it could be any number)

# kubectl set image POD/POD_NAME CONTAINER_NAME=IMAGE_NAME:TAG
=> kubectl set image pod/nginx nginx=nginx:1.7.1
=> kubectl describe po nginx # you will see an event 'Container will be killed and recreated'
=> kubectl get po nginx -w # watch it

## FETCH IP OF A POD
kubectl get po nginx-1 -o jsonpath='{.status.podIP}' -n ckad

## Get nginx pod's ip created in previous step, use a temp busybox image to wget its '/'

kubectl run bux --image=busybox --rm -it --restart=Never -- wget -O- $PO_ID:80

## GET IP AND PORT IN ONE GO
kubectl get pod nginx-1 -o jsonpath='{.status.podIP}:{.spec.containers[0].ports[0].containerPort}' -n ckad


## Create a busybox pod that echoes 'hello world' and then exits
show
kubectl run busybox --image=busybox -it --restart=Never -- echo 'hello world'

## Do the same, but have the pod deleted automatically when it's completed
show
kubectl run busybox --image=busybox -it --rm --restart=Never -- /bin/sh -c 'echo hello world'